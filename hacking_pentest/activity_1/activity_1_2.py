import argparse
import logging
from io import BytesIO
from typing import Dict, Optional

import requests
from bs4 import BeautifulSoup
from PIL import Image

# Constants
BASE_URL = "https://en.wikipedia.org/wiki/"
TIMEOUT = 10

# Setting up logging
logging.basicConfig(level=logging.INFO)
def get_wikipedia_page(keyword: str) -> Optional[str]:
    """
    Sends a request to Wikipedia and fetches the HTML content for the given keyword.

    Args:
        keyword (str): The keyword to search on Wikipedia.

    Returns:
        Optional[str]: The raw HTML content of the Wikipedia page, or None if the page is not found.
    """
    search_url = f"{BASE_URL}{keyword.replace(' ', '_')}"

    try:
        response = requests.get(search_url, timeout=TIMEOUT)
        response.raise_for_status()

        # Check if it's a disambiguation page or a search result page
        if "may refer to" in response.text or "disambiguation" in response.url:
            print(f"Disambiguation or multiple results found for '{keyword}', fetching the first relevant result.")
            soup = BeautifulSoup(response.text, "html.parser")

            # Find the first valid result link
            first_result = soup.find("a", href=True)
            if first_result and 'href' in first_result.attrs:
                first_link = first_result['href']
                search_url = "https://en.wikipedia.org" + first_link
                response = requests.get(search_url, timeout=10)
                response.raise_for_status()

        return response.text
    except requests.RequestException as e:
        logging.error("Error fetching Wikipedia page for %s: %s", keyword, e)
        return None


def parse_wikipedia_page(html_content: str) -> Dict[str, Optional[str]]:
    """
    Parses the Wikipedia page HTML and extracts the title, description, and first image.

    Args:
        html_content (str): The raw HTML content of the Wikipedia page.

    Returns:
        Dict[str, Optional[str]]: A dictionary containing the title, description, and image URL.
    """
    soup = BeautifulSoup(html_content, "html.parser")

    # Get the title of the page
    title_tag = soup.find("h1", id="firstHeading")
    title = title_tag.get_text() if title_tag else "No title found"

    # Get the first meaningful paragraph
    description = "No description found"
    for paragraph in soup.find_all("p"):
        if paragraph.text.strip():  # Ensure the paragraph is not empty
            description = paragraph.text.strip()
            break

    # Get the first image from the infobox
    image_url = None
    infobox = soup.find("table", class_="infobox")
    if infobox:
        image_tag = infobox.find("img")
        if image_tag:
            # Wikipedia image URLs are often relative, so we need to complete the URL
            image_url = image_tag.get("src")
            if image_url.startswith("//"):
                image_url = "https:" + image_url

    return {"title": title, "description": description, "image_url": image_url}


def render_image_in_terminal(image_url: str) -> None:
    """
    Fetches and displays the image from the given URL using ASCII art or in a simple image viewer.

    Args:
        image_url (str): The URL of the image to display.
    """
    try:
        # Download the image
        response = requests.get(image_url, timeout=TIMEOUT)
        img = Image.open(BytesIO(response.content))

        # Use terminal to show the image in ASCII form (optional)
        img.show()  # This will open the image in the default image viewer on your system

    except requests.RequestException as e:
        logging.error("Failed to fetch the image: %s", e)
    except IOError as e:
        logging.error("Failed to process the image: %s", e)


def get_wikipedia_info(keyword: str) -> Optional[Dict[str, str]]:
    """
    Fetches and parses the Wikipedia page for the given keyword, returning its title and description.

    Args:
        keyword (str): The keyword to search on Wikipedia.

    Returns:
        Optional[Dict[str, str]]: A dictionary containing the title and description, or None if the page is not found.
    """
    html_content = get_wikipedia_page(keyword)
    return parse_wikipedia_page(html_content) if html_content else None


# Only execute the following code block if the script is run directly
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Search Wikipedia and fetch information.")
    parser.add_argument("keyword", type=str, nargs='?', help="Keyword to search on Wikipedia (optional)")
    args = parser.parse_args()

    # Check if the keyword is passed, otherwise prompt the user for input
    if not args.keyword:
        keyword_to_search = input("Enter a keyword to search on Wikipedia: ")
    else:
        keyword_to_search = args.keyword

    result = get_wikipedia_info(keyword_to_search)

    if result:
        print(f"Title: {result['title']}")
        print(f"Description: {result['description']}")

        if result['image_url']:
            print(f"Image URL: {result['image_url']}")
            render_image_in_terminal(result['image_url'])
        else:
            print("No image found.")
    else:
        print("No information found.")
